
# Create function to highlight phrase matches

def highlight_phrases(conversation, phrases_color_map, dataframe):

    # Nested function to apply highlighting to a matched phrase
    def apply_highlight(phrase, color):
        # Return a styled Dash component to highlight the phrase
        return html.Span(children=[html.Strong(phrase)], style={"color": color})

    # Initialize an empty list to store the resulting Dash components
    highlighted_components = []

    # This list will be used to store all matches we find in the conversation
    matches = []   

    # Loop through each row of the dataframe to get the phrase groups and their associated match types
    for index, row in dataframe.iterrows():
        phrase_group = row['phrase_group']  # Update with the correct column name if needed
        match_type = row['phrase_match']    # Assuming 'phrase_match' contains 'EXACT' or 'CONTAINS'
        color = phrases_color_map.get(phrase_group)  # Assuming this is how colors are mapped

        # Split the phrase group into individual phrases (assuming they are comma-separated)
        for phrase in phrase_group.split(","):
            # Remove any leading or trailing whitespace from the phrase
            phrase = phrase.strip()           

            # Define the regex pattern based on the match type
            if match_type.lower() == "exact":
                pattern = r'\b{}\b'.format(re.escape(phrase))
            else:  # Assume 'CONTAINS' or any other value defaults to 'CONTAINS' behavior
                pattern = re.escape(phrase)

            # Use regex to find all occurrences of the current phrase in the conversation, ignoring case
            for match in re.finditer(pattern, conversation, flags=re.IGNORECASE):
                # Extract the start and end positions of the matched phrase
                start, end = match.span()
                # Add the details of this match to our matches list
                matches.append((start, end, phrase, color))

    # (rest of your function remains unchanged)
